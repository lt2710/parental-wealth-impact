#independence
cb053_1_:cb053_15_,
#urban if independence = other
cb054_1_:cb054_14_,
#hukou
cb055_1_:cb055_15_,
#party
cb063_w3_2_1_:cb063_w3_2_15_,
#working or not
cb070_w4_1_:cb070_w4_15_,
#occupation
cb071_1_:cb071_15_,
#marriage
cb063_1_:cb063_15_,
#spouse education
cb091_w4_1_:cb091_w4_15_,
#spouse working or not
cb093_w4_1_:cb093_w4_15_,
#num of children
cb065_1_:cb065_15_,
#income
cb069_1_:cb069_15_,
#ownership
cb071_w3_1_:cb071_w3_15_,
#homevalue
cb072_w3_1_:cb072_w3_15_
)
#transform into child-id based
var_child_prefix <- child_2018_wide %>%
names()%>%
setdiff("hhid")%>%
str_replace_all("[:digit:]+_$","")%>%
unique()
child_2018_long <- select(child_2018_wide, hhid)
prefix=var_child_prefix[1]
#output variable name
varname <- str_sub(prefix,1,-2)
#set of current variable names
vars_child <- c(paste0(prefix,c(1:16),"_"))
#make null columns if necessary
for (x in vars_child){
if(is.null(child_2018_wide[[x]])) {
child_2018_wide <- child_2018_wide%>%
mutate({{x}} := NA)
}
}
#transform data
child_data <- child_2018_wide %>%
data.table::melt(id.vars = "hhid",
measure.vars = vars_child)%>%
transmute(hhid = hhid,
childid = str_extract(variable,"_[:digit:]+_$")%>%str_extract("[:digit:]+"),
{{varname}} := value)
child_2018_long <- left_join(child_2018_long, child_data, by = ifelse(prefix == var_child_prefix[1],
"hhid",
c("hhid","childid")))
prefix=var_child_prefix[2]
#output variable name
varname <- str_sub(prefix,1,-2)
#set of current variable names
vars_child <- c(paste0(prefix,c(1:16),"_"))
#make null columns if necessary
for (x in vars_child){
if(is.null(child_2018_wide[[x]])) {
child_2018_wide <- child_2018_wide%>%
mutate({{x}} := NA)
}
}
#transform data
child_data <- child_2018_wide %>%
data.table::melt(id.vars = "hhid",
measure.vars = vars_child)%>%
transmute(hhid = hhid,
childid = str_extract(variable,"_[:digit:]+_$")%>%str_extract("[:digit:]+"),
{{varname}} := value)
child_2018_long <- left_join(child_2018_long, child_data, by = ifelse(prefix == var_child_prefix[1],
"hhid",
c("hhid","childid")))
View(child_2018_long)
prefix=var_child_prefix[1]
child_2018_long <- select(child_2018_wide, hhid)
ifelse(prefix == var_child_prefix[1],
"hhid",
c("hhid","childid"))
#output variable name
varname <- str_sub(prefix,1,-2)
#set of current variable names
vars_child <- c(paste0(prefix,c(1:16),"_"))
#make null columns if necessary
for (x in vars_child){
if(is.null(child_2018_wide[[x]])) {
child_2018_wide <- child_2018_wide%>%
mutate({{x}} := NA)
}
}
#transform data
child_data <- child_2018_wide %>%
data.table::melt(id.vars = "hhid",
measure.vars = vars_child)%>%
transmute(hhid = hhid,
childid = str_extract(variable,"_[:digit:]+_$")%>%str_extract("[:digit:]+"),
{{varname}} := value)
child_2018_long <- left_join(child_2018_long, child_data, by = ifelse(prefix == var_child_prefix[1],
"hhid",
c("hhid","childid")))
View(child_2018_long)
prefix=var_child_prefix[2]
prefix==var_child_prefix[2]
prefix==var_child_prefix[1]
View(child_2018_long)
#output variable name
varname <- str_sub(prefix,1,-2)
#set of current variable names
vars_child <- c(paste0(prefix,c(1:16),"_"))
#make null columns if necessary
for (x in vars_child){
if(is.null(child_2018_wide[[x]])) {
child_2018_wide <- child_2018_wide%>%
mutate({{x}} := NA)
}
}
#transform data
child_data <- child_2018_wide %>%
data.table::melt(id.vars = "hhid",
measure.vars = vars_child)%>%
transmute(hhid = hhid,
childid = str_extract(variable,"_[:digit:]+_$")%>%str_extract("[:digit:]+"),
{{varname}} := value)
View(child_data)
View(child_2018_long)
child_2018_long <- left_join(child_2018_long, child_data, by = ifelse(prefix == var_child_prefix[1],
"hhid",
c("hhid","childid")))
View(child_2018_long)
ifelse(prefix == var_child_prefix[1],
"hhid",
c("hhid","childid"))
prefix
prefix == var_child_prefix[1]
ifelse(prefix == var_child_prefix[1],
"hhid",
c("hhid","childid"))
ifelse(prefix == var_child_prefix[1],
"hhid",
c("hhid","childid"))
ifelse(prefix == "xchildbirth_",
"hhid",
c("hhid","childid"))
ifelse(prefix == var_child_prefix[1],
"hhid",
1)
ifelse
?ifelse
combination = c("hhid","childid")
ifelse(prefix == var_child_prefix[1],
"hhid",
combination)
prefix
var_child_prefix[1]
prefix == var_child_prefix[1]
ifelse(prefix == var_child_prefix[1],
NULL,
"childid")
prefix == var_child_prefix[1]
c("hhid",ifelse(prefix == var_child_prefix[1],
NULL,
"childid"))
child_2018_long <- left_join(child_2018_long, child_data, by = c("hhid",ifelse(prefix == var_child_prefix[1],
NULL,
"childid")))
View(child_2018_long)
prefix =var_child_prefix[1]
c("hhid",ifelse(prefix == var_child_prefix[1],
NULL,
"childid"))
ifelse(prefix == var_child_prefix[1],
NULL,
"childid")
ifelse(prefix == var_child_prefix[1],
NULL,
"childid")
ifelse(prefix == var_child_prefix[1],
NA,
"childid")
c("hhid",ifelse(prefix == var_child_prefix[1],
NA,
"childid"))
child_2018_long <- left_join(child_2018_long, child_data, by = c("hhid",ifelse(prefix == var_child_prefix[1],
NA,
"childid")))
child_2018_long <- select(child_2018_wide, hhid)
#output variable name
varname <- str_sub(prefix,1,-2)
#set of current variable names
vars_child <- c(paste0(prefix,c(1:16),"_"))
#make null columns if necessary
for (x in vars_child){
if(is.null(child_2018_wide[[x]])) {
child_2018_wide <- child_2018_wide%>%
mutate({{x}} := NA)
}
}
#transform data
child_data <- child_2018_wide %>%
data.table::melt(id.vars = "hhid",
measure.vars = vars_child)%>%
transmute(hhid = hhid,
childid = str_extract(variable,"_[:digit:]+_$")%>%str_extract("[:digit:]+"),
{{varname}} := value)
child_2018_long <- left_join(child_2018_long, child_data, by = c("hhid",ifelse(prefix == var_child_prefix[1],
NA,
"childid")))
child_2018_long <- select(child_2018_wide, hhid)
for (prefix in var_child_prefix){
#output variable name
varname <- str_sub(prefix,1,-2)
#set of current variable names
vars_child <- c(paste0(prefix,c(1:16),"_"))
#make null columns if necessary
for (x in vars_child){
if(is.null(child_2018_wide[[x]])) {
child_2018_wide <- child_2018_wide%>%
mutate({{x}} := NA)
}
}
#transform data
child_data <- child_2018_wide %>%
data.table::melt(id.vars = "hhid",
measure.vars = vars_child)%>%
transmute(hhid = hhid,
childid = str_extract(variable,"_[:digit:]+_$")%>%str_extract("[:digit:]+"),
{{varname}} := value)
if(prefix == var_child_prefix[1]){
key = "hhid"
} else {
key = c("hhid","childid")
}
child_2018_long <- left_join(child_2018_long, child_data, by = key)
}
warnings()
source('~/GitHub/parental-wealth-impact/charls_processing.R', echo=TRUE)
table(parent$tier)
table(psu$tier)
psu <- read.dta13("CHARLS2013/PSU.dta",
fromEncoding = "GB2312",
convert.factors = FALSE)
#city name missalinius
psu$city[psu$city == "北京"] <- "北京市"
psu$city[psu$city == "哈尔滨"] <- "哈尔滨市"
psu$city[psu$city == "天津"] <- "天津市"
#a new tier variable
psu$tier <- NA
psu$tier[psu$city %in% c(
"上海市",
"北京市",
"广州市",
"深圳市",
"重庆市",
"天津市",
"苏州市",
"成都市",
"武汉市",
"杭州市",
"南京市",
"西安市",
"长沙市",
"沈阳市",
"青岛市",
"郑州市",
"大连市",
"东莞市",
"宁波市"
)] <- "1st tier"
psu$tier[psu$city %in% c(
"厦门市",
"福州市",
"无锡市",
"合肥市",
"昆明市",
"哈尔滨市",
"济南市",
"佛山市",
"长春市",
"温州市",
"石家庄市",
"南宁市",
"常州市",
"泉州市",
"南昌市",
"贵阳市",
"太原市",
"烟台市",
"嘉兴市",
"南通市",
"金华市",
"珠海市",
"惠州市",
"徐州市",
"海口市",
"乌鲁木齐市",
"绍兴市",
"中山市",
"台州市",
"兰州市"
)] <- "2nd tier"
psu$tier[psu$city %in% c(
"潍坊市",
"保定市",
"镇江市",
"扬州市",
"桂林市",
"唐山市",
"三亚市",
"湖州市",
"呼和浩特市",
"廊坊市",
"洛阳市",
"威海市",
"盐城市",
"临沂市",
"江门市",
"汕头市",
"泰州市",
"漳州市",
"邯郸市",
"济宁市",
"芜湖市",
"淄博市",
"银川市",
"柳州市",
"绵阳市",
"湛江市",
"鞍山市",
"赣州市",
"大庆市",
"宜昌市",
"包头市",
"咸阳市",
"秦皇岛市",
"株洲市",
"莆田市",
"吉林市",
"淮安市",
"肇庆市",
"宁德市",
"衡阳市",
"南平市",
"连云港市",
"丹东市",
"丽江市",
"揭阳市",
"延边朝鲜族自治州",
"舟山市",
"九江市",
"龙岩市",
"沧州市",
"抚顺市",
"襄阳市",
"上饶市",
"营口市",
"三明市",
"蚌埠市",
"丽水市",
"岳阳市",
"清远市",
"荆州市",
"泰安市",
"衢州市",
"盘锦市",
"东营市",
"南阳市",
"马鞍山市",
"南充市",
"西宁市",
"孝感市",
"齐齐哈尔市"
)] <- "3rd tier"
table(psu$tier)
psu$tier<-
psu$tier%>%replace_na("4th tier")
table(psu$tier)
psu <- psu %>%
transmute(
cid = communityID,
province = province %>% as.factor(),
city = city %>% as.factor(),
tier = tier %>% as.factor()
)
psu %>% head()
table(psu$tier)
table(parent$tier)
table(parent_ind$tier)
## ----Merge all 2018----------------------------------------------------------------------------------------------------------------
parent_ind <-
demographic_2018 %>%
left_join(hukou_2018, by = "id") %>%
left_join(party_2018, by = "id") %>%
left_join(education_merged, by = "id") %>%
left_join(work_merged, by = "id") %>%
left_join(psu, by = "cid")
#select householders
parent_ind_hh <-
parent_ind %>%
group_by(hhid) %>%
arrange(sex) %>%
filter(row_number() == 1)
table(parent_ind$tier)
source('~/GitHub/parental-wealth-impact/charls_processing.R', echo=TRUE)
party_2018 <- demographic_raw_2018 %>%
select(id = ID,
party = bg004_w4) %>%
mutate(party = party %>%
as.numeric () %>%
replace_na(0) %>%
factor(
levels = c(1, 2),
labels = c("1 non party member","2 party member")
))
party_2018 %>% head()
demographic_raw_2018$bg004_w4%>%as.numeric()
demographic_raw_2018$bg004_w4%>%as.numeric()%>%recode(1,2)
demographic_raw_2018$bg004_w4%>%as.numeric()%>%recode(2,1)
party_2018 <- demographic_raw_2018 %>%
select(id = ID,
party = bg004_w4) %>%
mutate(party = party %>%
as.numeric () %>%
recode (2,1)%>%
factor(
levels = c(1, 2),
labels = c("1 non party member","2 party member")
))
party_2018 %>% head()
source('~/GitHub/parental-wealth-impact/charls_processing.R', echo=TRUE)
table(child_2018_long$xchildgender)
table(child_2018_long$xchildgender%>%as.factor())
table(child_2018_long$xchildgender%>%as.factor()%>%as.numeric())
table(child$urban)
table(child$urban%>%as.factor())
table(child$hukou%>%as.factor())
table(child$hukou)
table(child_2018_long$cb055)
table(child_2018_long$cb055)[1]
table(child_2018_long$cb055)[1]%>%View()
table(child$party)
table(child$working)
table(child$marriagehome)
source('~/GitHub/parental-wealth-impact/charls_processing.R', echo=TRUE)
child_2018_long$cb070_w4%>%class
child_2018_long$cb070_w4%>%table()
table(child$working)
table(merged$working)
table(merged$independence)
table(merged$job_child)
table(merged$job_spouse)
table(merged
$urban_child)
table(merged
$urban_parent)
table(child_2018$urban)
table(child$urban)
table(merged$urban_child)
source('~/GitHub/parental-wealth-impact/charls_processing.R', echo=TRUE)
table(merged$job_spouse)
table(merged$job_spouse%>%as.numeric())
#merge and resolve name conflict
merged <-
child %>%
ungroup()%>%
left_join(parent %>%
ungroup%>%
mutate(hhid = hhid %>%as.numeric()), by = c("hhid")) %>%
rename_at(vars(contains(".x")),
function(child_var) {
return(child_var %>%
str_sub(end = -3) %>%
paste("_child", sep = ""))
}) %>%
rename_at(vars(contains(".y")),
function(parent_var) {
return(parent_var %>%
str_sub(end = -3) %>%
paste("_parent", sep = ""))
}) %>%
mutate(urban_child =
ifelse(urban_child == "same as R",
urban_parent %>% as.character(),
urban_child %>% as.character()
) %>%
as.factor()
) %>%
mutate_at(c("childid",
"hhid",
"cid",
"id"),
as.numeric)
merged %>% head()
## ----------------------------------------------------------------------------------------------------------------------------------
summary(merged)
## ----------------------------------------------------------------------------------------------------------------------------------
save(merged, file = "output/merged.RData")
table(merged$urban_child)
table(merged$urban_parent)
table(child_2018$urban)
table(demographic_2018$urban)
source('~/GitHub/parental-wealth-impact/charls_processing.R', echo=TRUE)
source('~/GitHub/parental-wealth-impact/charls_processing.R', echo=TRUE)
devtools::document()
R CMD Rd2pdf
system("R CMD Rd2pdf charls_processing.R")
system("R CMD Rd2pdf charls_processing.R")
source('~/GitHub/parental-wealth-impact/charls_processing.R', echo=TRUE)
